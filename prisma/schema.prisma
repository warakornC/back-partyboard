// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Admin {
  Admin
  User
}

enum Status {
  Uncheck
  Checked
}

enum Type {
  News
  Share
  Community
  Problem
}

model User {
  id                    Int       @id @default(autoincrement())
  firstName             String    @map("first_name")
  lastName              String    @map("last_name")
  citizenIdentifyNumber String    @map("citizen_identify_number")
  email                 String?   @unique
  mobile                String?   @unique
  password              String
  profileImage          String?   @map("profile_image")
  coverImage            String?   @map("cover_image")
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  admin                 Admin     @default(User)
  posts                 Post[]
  comments              Comment[]
  skill                 Skill[]
  attemp                Attemp[]
  report                Report[]
  follows               Follow[]  @relation("following")
  followed               Follow[]  @relation("followed")

  @@map("users")
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String?
  type      Type?
  image     String?
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamp(0)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)
  user      User      @relation(fields: [userId], references: [id])
  userId    Int       @map("user_id")
  comments  Comment[]
  report    Report[]

  @@map("posts")
}

model Comment {
  id      Int      @id @default(autoincrement())
  comment String
  image   String?
  time    DateTime @default(now())
  user    User     @relation(fields: [userId], references: [id])
  userId  Int      @map("user_id")
  post    Post     @relation(fields: [postId], references: [id])
  postId  Int      @map("post_id")
  report  Report[]

  @@map("comments")
}

model Follow {
  id      Int      @id @default(autoincrement()) 
  following    User     @relation(name:"following" , fields: [followingId], references: [id])
  followingId  Int      @map("following_id")
  followed    User     @relation(name:"followed", fields: [followedId], references: [id])
  followedId  Int      @map("followed_id")

  @@map("follows")
}

model Skill {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")
  game   Game @relation(fields: [gameId], references: [id])
  gameId Int  @map("game_id")

  @@map("skills")
}

model Game {
  id       Int        @id @default(autoincrement())
  name     String?
  skill    Skill[]
  question Question[]

  @@map("games")
}

model Question {
  id       Int      @id @default(autoincrement())
  question String?
  answer   String?
  game     Game     @relation(fields: [gameId], references: [id])
  gameId   Int      @map("game_id")
  reply    Reply[]
  attemp   Attemp[]

  @@map("questions")
}

model Reply {
  id         Int      @id @default(autoincrement())
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int      @map("question_id")
  test  String?
  answer Boolean  
  attemp     Attemp[]

  @@map("replys")
}

model Attemp {
  id         Int      @id @default(autoincrement())
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int      @map("question_id")
  reply      Reply    @relation(fields: [replyId], references: [id])
  replyId    Int      @map("reply_id")
  user       User     @relation(fields: [userId], references: [id])
  userId     Int      @map("user_id")

  @@map("attemps")
}

model Report {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int     @map("user_id")
  post      Post    @relation(fields: [postId], references: [id])
  postId    Int     @map("post_id")
  comment   Comment @relation(fields: [commentId], references: [id])
  commentId Int     @map("comment_id")
  text      String?
  status    Status  @default(Uncheck)
  detail    String?

  @@map("reports")
}
